import { Component, Logger } from '@nestjs/common';

import { Extra, Markup, Telegraf, BaseScene, Stage, session } from 'telegraf';
import * as moment from 'moment';
const HttpsProxyAgent = require('https-proxy-agent')

import { IUser, IApplicationRole, IServerResponse } from '@kolenergo/core';
import { IRequest, IRoutePoint } from '@kolenergo/auto';
import { RequestsService } from '../requests/requests.service';
import { LDAPService } from '../../common/authentication/ldap.service';
import { PostgresService } from '../../common/database/postgres.service';
import { UsersService } from '../../common/users/users.service';
import { ILdapUser } from '../../common/authentication/interfaces/ldap-user.interface';
import { ISession, ITelegramUser } from './interfaces';
import { environment } from '../../envoirenments';

@Component()
export class BotService {
  private readonly bot;
  private readonly authScene: BaseScene<any>;
  private readonly userScene: BaseScene<any>;
  private readonly driverScene: BaseScene<any>;
  private requestMsg;

  constructor(
    private readonly ldap: LDAPService,
    private postgre: PostgresService,
    private readonly users: UsersService,
    private readonly requests: RequestsService,
  ) {
    /*
    const boss = new Bot('1340871511:AAHPHIXrWMW3YfVOxaYnNabQj1DT4CA0uRQ');
    boss.onCommand('/start', (msg: Message, chat: Chat) => {
      chat.sendText(
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
        new InlineKeyboard().row(InlineKeyboard.callbackButton('üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'sign-in')));
    });
     */



    //this.bot = new Telegraf(environment.telegramBotToken);
    this.bot = new Telegraf(environment.telegramBotToken, {
      telegram: {
        agent: new HttpsProxyAgent('http://kolu-proxy.nw.mrsksevzap.ru:8080'),
      },
    });
    this.authScene = new BaseScene('auth-scene');
    this.userScene = new BaseScene('user-scene');
    this.driverScene = new BaseScene('driver-scene');


    this.bot.session = null;
    this.bot.context.account = null;
    this.bot.context.password = null;
    this.bot.context.user = null;
    this.bot.context.requests = {data: []};

    this.initAuthScene();
    this.initUserScene();
    this.initDriverScene();
    const stage = new Stage([this.authScene, this.userScene, this.driverScene]);
    this.bot.use(session());
    this.bot.use(stage.middleware());

    this.bot.start(async (ctx) => {
      const session: IServerResponse<{session: ISession, user: IUser}> = await this.getSession((ctx.from as ITelegramUser).id);
      Logger.log(JSON.stringify(session));
      if (session.data.session) {
        this.bot.context.session = session.data.session;
        this.bot.context.user = session.data.user;
        const isDriver = (this.bot.context.user as IUser).rolesList.find((role: IApplicationRole) => role.id === 21);
        if (isDriver) {
          await ctx.scene.enter('driver-scene');
        } else {
          await ctx.scene.enter('user-scene');
        }
      } else {
        await ctx.scene.enter('auth-scene');
      }
    });
    this.bot.launch({polling: {allowedUpdates: ['message', 'callback_query']}});
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  initAuthScene() {
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
     */
    this.authScene.enter(async (ctx) => {
      this.bot.context.account = null;
      this.bot.context.password = null;
      this.bot.context.user = null;
      this.bot.context.currentRequestIndex = 0;
      await ctx.reply(
        '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
        Extra.markup(
          Markup.inlineKeyboard([
            Markup.callbackButton('üîë  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'auth'),
          ]),
        ),
      );
    });

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    this.authScene.action('auth', async (ctx) => {
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å Active Directory');
    });

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    /*
    this.bot.action('auth', async (ctx) => {
      console.log(ctx);
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å Active Directory');
    });

     */

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    this.authScene.on('text', async (ctx) => {
      if (!this.bot.context.account) {
        this.bot.context.account = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      } else {
        this.bot.context.password = ctx.message.text;
        try {
          const ldapUser: ILdapUser = await this.ldap.logIn(this.bot.context.account, this.bot.context.password);
          if (ldapUser) {
            this.bot.context.user = await this.users.getByAccount(ldapUser.sAMAccountName, 'AUTO_REQUESTS_MRSK');
            await this.addSession(this.bot.context.user.id, (ctx.from as ITelegramUser).id, ctx.chat.id);
            const isDriver = (this.bot.context.user as IUser).rolesList.find((role: IApplicationRole) => role.id === 21);
            if (isDriver) {
              await ctx.scene.enter('driver-scene');
            } else {
              await ctx.scene.enter('user-scene');
            }
          }
        } catch (err) {
          Logger.error(err.message);
          await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
          return ctx.scene.reenter();
        }
      }
    });

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ —Å–æ —Å—Ü–µ–Ω—ã
     */
    this.authScene.leave(async () => {});

  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  initUserScene() {
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
     */
    this.userScene.enter(async (ctx) => {
      this.bot.context.currentRequestIndex = 0;
      this.bot.context.requests = await this.requests.getRequests(
        0,
        0,
        0,
        4,
        0,
        0,
        this.bot.context.user.id,
        null,
      );
      await ctx.reply(
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${this.bot.context.user.firstName}!`,
        Markup.keyboard([[`üöó –ú–æ–∏ –∑–∞—è–≤–∫–∏ (${this.bot.context.requests.data.length})`]]).oneTime().resize().extra(),
      );
    });

    this.userScene.action('next', async (ctx) => {
      this.bot.context.currentRequestIndex = this.bot.context.currentRequestIndex + 1 <= this.bot.context.requests.data.length - 1
        ? this.bot.context.currentRequestIndex + 1
        : 0;
      // const request = this.bot.context.requests.data[this.bot.context.currentRequestIndex];
      const request = await this.requests.getRequestById(this.bot.context.requests.data[this.bot.context.currentRequestIndex].id);
      let routes = '';
      (request.data as IRequest).route.forEach((route: IRoutePoint) => {
        routes += `‚ñ´ ${route.title}\n`;
      });


      await ctx.editMessageText(
        `<b>–ó–∞—è–≤–∫–∞ #${request.data.id}</b>\n
üïí <strong>${moment(request.data.startTime).format('DD.MM.YYYY, HH:mm')} - ${moment(request.data.endTime).format('HH:mm')}</strong>
‚Ñπ <i>${request.data.description}</i>\n
${routes}
üöò ${request.data.transport ? request.data.transport.model + ' - ' + request.data.transport.registrationNumber : '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
üë® ${request.data.driver ? request.data.driver.firstName + ' ' + request.data.driver.lastName + (request.data.driver.mobile ? ' - ' + request.data.driver.mobile : '') : '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
`,
        Extra.HTML().markup(
          Markup.inlineKeyboard(
            this.bot.context.requests.data.length > 1
              ? [
                [Markup.callbackButton('‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', 'cancel')],
                [Markup.callbackButton('‚û°  –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞', 'next')],
              ]
              : [
                Markup.callbackButton('‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', 'cancel'),
              ]),
        ));
    });

    this.userScene.action('cancel', async (ctx) => {
      const request = this.bot.context.requests.data[this.bot.context.currentRequestIndex];
      await this.requests.cancelRequest(request.id);
      this.bot.context.requests.data.splice(this.bot.context.currentRequestIndex, 1);
      return await ctx.reply(
        `–ó–∞—è–≤–∫–∞ #${request.id} –æ—Ç–º–µ–Ω–µ–Ω–∞`,
        Markup.keyboard([[`üöó –ú–æ–∏ –∑–∞—è–≤–∫–∏ (${this.bot.context.requests.data.length})`]]).oneTime().resize().extra(),
      );
    });

    this.userScene.hears(/üöó –ú–æ–∏ –∑–∞—è–≤–∫–∏*/, async (ctx) => {
      this.bot.context.requests = await this.requests.getRequests(
        0,
        0,
        0,
        4,
        0,
        0,
        this.bot.context.user.id,
        null,
      );
      if (this.bot.context.requests.data.length > 0) {
        const request = this.bot.context.requests.data[this.bot.context.currentRequestIndex];
        let routes = '';
        (request as IRequest).route.forEach((route: IRoutePoint) => {
          routes += `‚ñ´ ${route.title}\n`;
        });
        this.requestMsg = await ctx.replyWithHTML(
          `<b>–ó–∞—è–≤–∫–∞ #${request.id}</b>\n
üïí <strong>${moment(request.startTime).format('DD.MM.YYYY, HH:mm')} - ${moment(request.endTime).format('HH:mm')}</strong>
‚Ñπ <i>${request.description}</i>\n
${routes}
üöò ${request.transport ? request.transport.model + ' - ' + request.transport.registrationNumber : '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
üë® ${request.driver ? request.driver.firstName + ' ' + request.driver.lastName + (request.driver.mobile ? ' - ' + request.driver.mobile : '') : '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}
`,
          Extra.markup(
            Markup.inlineKeyboard(
              this.bot.context.requests.data.length > 1
                ? [
                  [Markup.callbackButton('‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', 'cancel')],
                  [Markup.callbackButton('‚û°  –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞', 'next')],
                ]
                : [
                  Markup.callbackButton('‚ùå  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', 'cancel'),
                ]),
          ));
      } else {
        return await ctx.reply('–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è
   */
  initDriverScene() {
    this.driverScene.enter(async (ctx) => {
      this.bot.context.currentRequestIndex = 0;
      this.bot.context.requests = await this.requests.getRequests(
        moment().startOf('day').unix() * 1000,
        moment().endOf('day').unix() * 1000,
        0,
        4,
        0,
        this.bot.context.user.id,
        0,
        null,
      );
      await ctx.reply(
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${this.bot.context.user.firstName}!`,
        Markup.keyboard([[`üöó –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏ —Å–µ–≥–æ–¥–Ω—è (${this.bot.context.requests.data.length})`]]).oneTime().resize().extra(),
      );
    });

    this.driverScene.action('done', async (ctx) => {
      const request = this.bot.context.requests.data[this.bot.context.currentRequestIndex];
      await this.requests.doneRequest(request.id);
      this.bot.context.requests.data.splice(this.bot.context.currentRequestIndex, 1);
      return await ctx.reply(
        `–ó–∞—è–≤–∫–∞ #${request.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`,
        Markup.keyboard([[`üöó –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏ —Å–µ–≥–æ–¥–Ω—è (${this.bot.context.requests.data.length})`]]).oneTime().resize().extra(),
      );
    });

    this.driverScene.hears(/üöó –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏*/, async (ctx) => {
      this.bot.context.requests = await this.requests.getRequests(
        moment().startOf('day').unix() * 1000,
        moment().endOf('day').unix() * 1000,
        0,
        4,
        0,
        this.bot.context.user.id,
        0,
        null,
      );
      if (this.bot.context.requests.data.length > 0) {
        const request = this.bot.context.requests.data[this.bot.context.currentRequestIndex];
        let routes = '';
        (request as IRequest).route.forEach((route: IRoutePoint) => {
          routes += `‚ñ´ ${route.title}\n`;
        });
        await ctx.replyWithHTML(
          `<b>–ó–∞—è–≤–∫–∞ #${request.id}</b>\n\n` +
          `üë® ${request.user.firstName} ${request.user.lastName} ${request.user.mobile ? ' - ' + request.user.mobile + '\n' : '\n'}` +
          `üïí <strong>${moment(request.startTime).format('DD.MM.YYYY, HH:mm')} - ${moment(request.endTime).format('HH:mm')}</strong>\n` +
          `‚Ñπ <i>${request.description}</i>\n\n` +
          `${routes}\n`,
          // `üöò ${request.transport ? request.transport.model + ' - ' + request.transport.registrationNumber : '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`,
          Extra.markup(
            Markup.inlineKeyboard(
              this.bot.context.requests.data.length > 1
                ? [
                  [Markup.callbackButton('‚úÖ  –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É', 'done')],
                  [Markup.callbackButton('‚û°  –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞', 'next')],
                ]
                : [
                  Markup.callbackButton('‚úÖ  –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É', 'done'),
                ]),
          ));
      } else {
        return await ctx.reply('–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–µ–∑–¥–æ–∫ –Ω–µ—Ç');
      }
    });

    this.driverScene.action('next', async (ctx) => {
      this.bot.context.currentRequestIndex = this.bot.context.currentRequestIndex + 1 <= this.bot.context.requests.data.length - 1
        ? this.bot.context.currentRequestIndex + 1
        : 0;
      // const request = this.bot.context.requests.data[this.bot.context.currentRequestIndex];
      const request = await this.requests.getRequestById(this.bot.context.requests.data[this.bot.context.currentRequestIndex].id);
      let routes = '';
      (request.data as IRequest).route.forEach((route: IRoutePoint) => {
        routes += `‚ñ´ ${route.title}\n`;
      });
      await ctx.replyWithHTML(
        `<b>–ó–∞—è–≤–∫–∞ #${request.data.id}</b>\n\n` +
        `üë® ${request.data.user.firstName} ${request.data.user.lastName} ${request.data.user.mobile ? ' - ' + request.data.user.mobile + '\n' : '\n'}` +
        `üïí <strong>${moment(request.data.startTime).format('DD.MM.YYYY, HH:mm')} - ${moment(request.data.endTime).format('HH:mm')}</strong>\n` +
        `‚Ñπ <i>${request.data.description}</i>\n\n` +
        `${routes}\n`,
        // `üöò ${request.data.transport ? request.data.transport.model + ' - ' + request.data.transport.registrationNumber : '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}`,
        Extra.markup(
          Markup.inlineKeyboard(
            this.bot.context.requests.data.length > 1
              ? [
                Markup.callbackButton('‚úÖ  –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É', 'done'),
                Markup.callbackButton('‚û°  –°–ª–µ–¥—É—é—â–∞—è –∑–∞—è–≤–∫–∞', 'next'),
              ]
              : [
                Markup.callbackButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É', 'done'),
              ]),
        ));
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  async getSession(telegramId: number): Promise<IServerResponse<{session: ISession, user: IUser}>> {
    return await this.postgre.query(
      'auto-mrsk-get-telegram-session',
      'SELECT auto_mrsk.sessions_get($1)',
      [telegramId],
      'sessions_get',
    );
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param userId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param telegramUserId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param telegramChatId - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≤ Telegram
   */
  async addSession(
    userId: number,
    telegramUserId: number,
    telegramChatId: number,
  ): Promise<IServerResponse<{id: number, userId: number, telegramUserId: number, telegramChatId: number}>> {
    return await this.postgre.query(
      'auto-mrsk-add-telegram-session',
      'SELECT auto_mrsk.sessions_add($1, $2, $3)',
      [userId, telegramUserId, telegramChatId],
      'sessions_add',
    );
  }
}
